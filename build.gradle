import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net/'
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing true
        }
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

version = '1.1.1'
group = 'io.github.tox1cozz.mixinbooterlegacy'

sourceCompatibility = targetCompatibility = '1.8'

ext {
    mixinVersion = '0.8.2'

    mixinConfigName = 'mixinbooterlegacy'
    mixinSrg = new File(buildDir, "mixins/mixin.${mixinConfigName}.srg")
    mixinRefMapName = "mixin.${mixinConfigName}.refmap.json"
    mixinRefMap = new File(buildDir, "mixins/" + mixinRefMapName)
}

minecraft {
    version = '1.7.10-10.13.4.1614-1.7.10'
    runDir = 'run'
}

configurations {
    repackMixin
    repackMixinProcessor
    sources {
        transitive = false
    }
    javadoc {
        transitive = false
    }
}

repositories {
    maven {
        name 'Spongepowered'
        url 'https://repo.spongepowered.org/maven'
    }
    flatDir {
        dirs 'dependencies'
    }
}

dependencies {
    repackMixin "org.spongepowered:mixin:$mixinVersion"
    // noinspection GradlePackageUpdate
    repackMixin 'org.ow2.asm:asm-tree:7.2'
    // noinspection GradlePackageUpdate
    repackMixin 'org.ow2.asm:asm-commons:7.2'
    // noinspection GradlePackageUpdate
    repackMixin 'org.ow2.asm:asm-util:7.2'
    // noinspection GradlePackageUpdate, VulnerableLibrariesLocal
    repackMixin 'com.google.guava:guava:21.0'

    repackMixinProcessor "org.spongepowered:mixin:$mixinVersion:processor"

    sources "org.spongepowered:mixin:$mixinVersion:sources"
    javadoc "org.spongepowered:mixin:$mixinVersion:javadoc"

    if (findProperty('generateRepacks') == null) {
        implementation name: "mixin-$mixinVersion-repack"
        annotationProcessor name: "mixin-$mixinVersion-processor-repack"
    }
}

reobf {
    if (mixinSrg.exists()) {
        addExtraSrgFile mixinSrg
    }
}

task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin("forge").delayedFile('{SRG_DIR}')
    include '**/*.srg'
    into 'build/srgs'
}

// Execute for generate mixin repack jar
task repackMixinJar(type: ShadowJar) {
    destinationDirectory.set(layout.projectDirectory.dir('dependencies'))
    archiveFileName.set("mixin-$mixinVersion-repack.jar")
    configurations = [project.configurations.repackMixin]

    mergeServiceFiles()

    exclude 'META-INF/MANIFEST.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    exclude '**/module-info.class'

    relocate 'org.objectweb.asm', 'org.spongepowered.libraries.org.objectweb.asm'
    relocate 'com.google.common', 'org.spongepowered.libraries.com.google.common'
    relocate 'com.google.thirdparty.publicsuffix', 'org.spongepowered.libraries.com.google.thirdparty.publicsuffix'
}

// Execute for generate mixin annotation processor repack jar
task repackMixinProcessorJar(type: ShadowJar) {
    destinationDirectory.set(layout.projectDirectory.dir('dependencies'))
    archiveFileName.set("mixin-$mixinVersion-processor-repack.jar")
    configurations = [project.configurations.repackMixinProcessor]

    mergeServiceFiles()

    exclude 'META-INF/MANIFEST.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    exclude '**/module-info.class'

    relocate 'org.objectweb.asm', 'org.spongepowered.libraries.org.objectweb.asm'
    relocate 'com.google.common', 'org.spongepowered.libraries.com.google.common'
    relocate 'com.google.gson', 'org.spongepowered.libraries.com.google.gson'
    relocate 'org.apache.logging.log4j', 'org.spongepowered.libraries.org.apache.logging.log4j'
    relocate 'com.google.thirdparty.publicsuffix', 'org.spongepowered.libraries.com.google.thirdparty.publicsuffix'
}

compileJava {
    dependsOn copySrgs
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
    options.encoding = 'UTF-8'
}

archivesBaseName = '!mixinbooterlegacy'

jar {
    manifest {
        attributes 'FMLCorePlugin': 'io.github.tox1cozz.mixinbooterlegacy.MixinBooterLegacyPlugin'
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
    }

    from(zipTree(layout.projectDirectory.file("dependencies/mixin-$mixinVersion-repack.jar"))) {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/*.Processor'
        // Replaced by custom classes
        exclude 'org/spongepowered/asm/bridge/**'
    }

    from mixinRefMap
}

task annotationProcessorJar(type: Jar, dependsOn: classes) {
    classifier = 'processor'
    from(sourceSets.main.output) {
        include 'io/github/tox1cozz/mixinextras/**'
        include 'META-INF/services/javax.annotation.processing.Processor'
    }
    from(zipTree(layout.projectDirectory.file("dependencies/mixin-$mixinVersion-processor-repack.jar"))) {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/*.Processor'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from(configurations.sources.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/*.Processor'
        // Replaced by custom classes
        exclude 'org/spongepowered/asm/bridge/**'
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from {
        configurations.javadoc.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

artifacts {
    archives annotationProcessorJar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'mixinbooterlegacy'
            artifact(jar) {
                builtBy jar
            }
            artifact(annotationProcessorJar) {
                builtBy annotationProcessorJar
            }
            artifact(javadocJar) {
                builtBy javadocJar
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
        }
    }
}